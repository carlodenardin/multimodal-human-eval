{"problem": "p84", "diagram_type": "fc", "diagram_level": "l1", "generated_code": "\ndef p84(n):\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    binary_result = bin(sum_of_digits)[2:]\n    return binary_result\n"}
{"problem": "p84", "diagram_type": "fc", "diagram_level": "l2", "generated_code": "\ndef p84(n: int) -> str:\n    sum_digits = sum(int(digit) for digit in str(n))\n    res = bin(sum_digits)[2:]\n    return res\n"}
{"problem": "p84", "diagram_type": "fc", "diagram_level": "l3", "generated_code": "\ndef p84(n: int) -> str:\n    sum = 0\n    res = \"\"\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    while sum > 0:\n        r = sum % 2\n        sum //= 2\n        res += str(r)\n    return res\n"}
{"problem": "p84", "diagram_type": "bpmn", "diagram_level": "l1", "generated_code": "\ndef p84(n):\n    digit_sum = sum(int(digit) for digit in str(n))\n    return bin(digit_sum)[2:]\n"}
{"problem": "p84", "diagram_type": "bpmn", "diagram_level": "l2", "generated_code": "\ndef p84(n):\n    sum_digits = 0\n    res = \"\"\n    sum_digits = sum(int(digit) for digit in str(abs(n)))\n    res = bin(sum_digits)[2:]\n    return res\n"}
{"problem": "p84", "diagram_type": "bpmn", "diagram_level": "l3", "generated_code": "\ndef p84(n):\n    sum = 0\n    res = \"\"\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n        while sum > 0:\n            r = sum % 2\n            sum //= 10\n            res += str(r)\n    return res\n"}
{"problem": "p84", "diagram_type": "block", "diagram_level": "l1", "generated_code": "\ndef p84(n):\n    digit_sum = sum(int(digit) for digit in str(n))\n    return bin(digit_sum)[2:]\n"}
{"problem": "p106", "diagram_type": "fc", "diagram_level": "l1", "generated_code": "\ndef p106(n):\n    result = []\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            value = 1\n            for j in range(1, i + 1):\n                value *= j\n        else:\n            value = sum(range(1, i + 1))\n        result.append(value)\n        i += 1\n    return result\n"}
{"problem": "p106", "diagram_type": "fc", "diagram_level": "l2", "generated_code": "\ndef p106(n: int):\n    res = []\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            res.append(sum(range(1, i + 1)))\n        else:\n            res.append(prod(range(1, i + 1)))\n        i += 1\n    return res\n\ndef prod(iterable):\n    result = 1\n    for x in iterable:\n        result *= x\n    return result\n"}
{"problem": "p106", "diagram_type": "fc", "diagram_level": "l3", "generated_code": "\ndef p106(n: int) -> list:\n    res = []\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            x = 0\n            j = 1\n            while j <= i:\n                res.append(x)\n                x = x + j\n                j = j + 1\n        else:\n            x = 1\n            j = 1\n            while j <= i:\n                res.append(x)\n                x = x * j\n                j = j + 1\n        i = i + 1\n    return res\n"}
{"problem": "p106", "diagram_type": "bpmn", "diagram_level": "l1", "generated_code": "\ndef p106(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            total_sum = sum(range(1, i + 1))\n            result.append(total_sum)\n    return result\n"}
{"problem": "p106", "diagram_type": "bpmn", "diagram_level": "l2", "generated_code": "\ndef p106(n):\n    result = []\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n        i += 1\n    return result\n\ndef factorial(x):\n    if x == 0 or x == 1:\n        return 1\n    return x * factorial(x - 1)\n"}
{"problem": "p106", "diagram_type": "bpmn", "diagram_level": "l3", "generated_code": "\ndef p106(n):\n    result = []\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            x = 1\n            j = 1\n            while j <= i:\n                x *= j\n                j += 1\n        else:\n            x = 0\n            j = 1\n            while j <= i:\n                x += j\n                j += 1\n        result.append(x)\n        i += 1\n    return result\n"}
{"problem": "p106", "diagram_type": "block", "diagram_level": "l1", "generated_code": "\ndef p106(n):\n    import math\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n"}
{"problem": "p108", "diagram_type": "fc", "diagram_level": "l1", "generated_code": "\ndef p108(lst):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    count = sum(1 for number in lst if sum_of_digits(number) > 0)\n    return count\n"}
{"problem": "p108", "diagram_type": "fc", "diagram_level": "l2", "generated_code": "\ndef p108(arr):\n    res = 0\n    for value in arr:\n        digits = [int(digit) for digit in str(abs(value))]\n        if sum(digits) > 0:\n            res += 1\n    return res\n"}
{"problem": "p108", "diagram_type": "fc", "diagram_level": "l3", "generated_code": "\ndef p108(arr):\n    res = 0\n    i = 0\n    while i < len(arr):\n        n = arr[i]\n        digits = []\n        isNeg = 1\n        if n < 0:\n            isNeg = -1\n            n = abs(n)\n        while n > 0:\n            digits.append(n % 10)\n            n = n // 10\n        if sum(digits) > 0:\n            res += 1\n        i += 1\n    return res\n"}
{"problem": "p108", "diagram_type": "bpmn", "diagram_level": "l1", "generated_code": "\ndef p108(int_list):\n    count = 0\n    for number in int_list:\n        if sum(int(digit) for digit in str(abs(number))) > 0:\n            count += 1\n    return count\n"}
{"problem": "p108", "diagram_type": "bpmn", "diagram_level": "l2", "generated_code": "\ndef p108(int_list):\n    res = 0\n    for number in int_list:\n        sum_signed_digits = sum(int(digit) for digit in str(abs(number)))\n        if sum_signed_digits > 0:\n            res += 1\n    return res\n"}
{"problem": "p108", "diagram_type": "bpmn", "diagram_level": "l3", "generated_code": "\ndef p108(lst):\n    res = 0\n    i = 0\n    while i < len(lst):\n        n = lst[i]\n        digits = []\n        isNeg = 1\n        if n < 0:\n            isNeg = -1\n        n = abs(n)\n        while n > 0:\n            digits.append(n % 10 * isNeg)\n            n //= 10\n        if sum(digits) > 0:\n            res += 1\n        i += 1\n    return res\n"}
{"problem": "p108", "diagram_type": "block", "diagram_level": "l1", "generated_code": "\ndef p108(int_list):\n    count = 0\n    for num in int_list:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count\n"}
{"problem": "p119", "diagram_type": "fc", "diagram_level": "l1", "generated_code": "\ndef p119(strings):\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    a, b = strings\n    concatenated_strings = [a + b, b + a]\n\n    for string in concatenated_strings:\n        if is_balanced(string):\n            return 'Yes'\n    \n    return 'No'\n"}
{"problem": "p119", "diagram_type": "fc", "diagram_level": "l2", "generated_code": "\ndef p119(I):\n    def check_string(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    s1 = I[0] + I[1]\n    s2 = I[1] + I[2]\n    \n    c1 = check_string(s1)\n    c2 = check_string(s2)\n    \n    return c1 or c2\n"}
{"problem": "p119", "diagram_type": "fc", "diagram_level": "l3", "generated_code": "\ndef p119(lst):\n    def check_string(s):\n        i = 0\n        c = 0\n        while i < len(s):\n            if s[i] == '(':\n                c += 1\n            else:\n                c -= 1\n            if c < 0:\n                return False\n            i += 1\n        return c == 0\n\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[2]\n    c1 = check_string(s1)\n    c2 = check_string(s2)\n\n    if c1 or c2:\n        return 'Yes'\n    return 'No'\n"}
{"problem": "p119", "diagram_type": "bpmn", "diagram_level": "l1", "generated_code": "\ndef p119(strings):\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    combined1 = strings[0] + strings[1]\n    combined2 = strings[1] + strings[0]\n\n    if is_balanced(combined1) or is_balanced(combined2):\n        return 'Yes'\n    return 'No'\n"}
{"problem": "p119", "diagram_type": "bpmn", "diagram_level": "l2", "generated_code": "\ndef p119(strings):\n    def check_string(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    str1, str2 = strings\n    combined1 = str1 + str2\n    combined2 = str2 + str1\n    \n    c1 = check_string(combined1)\n    c2 = check_string(combined2)\n    \n    if c1 or c2:\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"problem": "p119", "diagram_type": "bpmn", "diagram_level": "l3", "generated_code": "\ndef p119(strings):\n    def check_string(s):\n        i = 0\n        c = 0\n        while i < len(s):\n            if s[i] == '(':\n                c += 1\n            else:\n                c -= 1\n            if c < 0:\n                return False\n            i += 1\n        return c == 0\n\n    str1, str2 = strings\n    c1 = check_string(str1 + str2)\n    c2 = check_string(str2 + str1)\n\n    if c1 or c2:\n        return 'Yes'\n    return 'No'\n"}
{"problem": "p119", "diagram_type": "block", "diagram_level": "l1", "generated_code": "\ndef p119(strings):\n    from itertools import permutations\n\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    a, b = strings\n    combinations = [a + b, b + a]\n\n    for combo in combinations:\n        if is_balanced(combo):\n            return 'Yes'\n    return 'No'\n"}
{"problem": "p120", "diagram_type": "fc", "diagram_level": "l1", "generated_code": "\ndef p120(int_list, k):\n    int_list.sort()\n    return int_list[-k:]\n"}
{"problem": "p120", "diagram_type": "fc", "diagram_level": "l2", "generated_code": "\ndef p120(lst: list[int], k: int) -> list[int]:\n    lst.sort()\n    return lst[-k:]\n"}
{"problem": "p120", "diagram_type": "fc", "diagram_level": "l3", "generated_code": "\ndef p120(i: list[int], k: int) -> int:\n    i.sort()\n    return i[-k]\n"}
{"problem": "p120", "diagram_type": "bpmn", "diagram_level": "l1", "generated_code": "\ndef p120(lst, k):\n    return sorted(lst)[-k:]\n"}
{"problem": "p120", "diagram_type": "bpmn", "diagram_level": "l2", "generated_code": "\ndef p120(numbers, k):\n    numbers.sort()\n    return numbers[-k:]\n"}
{"problem": "p120", "diagram_type": "bpmn", "diagram_level": "l3", "generated_code": "\ndef p120(lst, k):\n    lst.sort()\n    return lst[-k:]\n"}
{"problem": "p120", "diagram_type": "block", "diagram_level": "l1", "generated_code": "\ndef p120(numbers, k):\n    numbers.sort()\n    return numbers[-k:]\n"}
{"problem": "p126", "diagram_type": "fc", "diagram_level": "l1", "generated_code": "\ndef p126(int_list):\n    return sorted(int_list) == int_list and len(int_list) == len(set(int_list))\n"}
{"problem": "p126", "diagram_type": "fc", "diagram_level": "l2", "generated_code": "\ndef p126(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    count = {}\n    for num in lst:\n        count[num] = count.get(num, 0) + 1\n    for num in count.values():\n        if num > 2:\n            return False\n    return True\n"}
{"problem": "p126", "diagram_type": "fc", "diagram_level": "l3", "generated_code": "\ndef p126(lst):\n    i = 1\n    if i >= len(lst):\n        return True\n    while i < len(lst):\n        if lst[i] < lst[i - 1]:\n            return False\n        i = i + 1\n    if i > 1 and lst[i - 1] == lst[i - 2]:\n        return False\n    return True\n"}
{"problem": "p126", "diagram_type": "bpmn", "diagram_level": "l1", "generated_code": "\ndef p126(int_list):\n    return int_list == sorted(int_list) and len(int_list) == len(set(int_list))\n"}
{"problem": "p126", "diagram_type": "bpmn", "diagram_level": "l2", "generated_code": "\ndef p126(int_list):\n    if int_list != sorted(int_list):\n        return False\n    for num in set(int_list):\n        if int_list.count(num) > 2:\n            return False\n    return True\n"}
{"problem": "p126", "diagram_type": "bpmn", "diagram_level": "l3", "generated_code": "\ndef p126(lst):\n    i = 0\n    while i < len(lst):\n        if lst[i] < lst[i + 1]:\n            i += 1\n        else:\n            return False\n    return True\n"}
{"problem": "p126", "diagram_type": "block", "diagram_level": "l1", "generated_code": "\ndef p126(arr):\n    if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        return False\n    if len(arr) != len(set(arr)) and any(arr.count(x) > 2 for x in set(arr)):\n        return False\n    return True\n"}
{"problem": "p131", "diagram_type": "fc", "diagram_level": "l1", "generated_code": "\ndef p131(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0\n"}
{"problem": "p131", "diagram_type": "fc", "diagram_level": "l2", "generated_code": "\ndef p131(n: int) -> int:\n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n        \n    return product if has_odd else 0\n"}
{"problem": "p131", "diagram_type": "fc", "diagram_level": "l3", "generated_code": "\ndef p131(n: int) -> int:\n    product = 1\n    odd_flag = 0\n    if n <= 0:\n        return 0\n    while n > 0:\n        d = n % 10\n        if odd_flag != 0:\n            product = product\n        else:\n            if d % 2 != 0:\n                product *= d\n                odd_flag = 1\n        n //= 10\n    return product\n"}
{"problem": "p131", "diagram_type": "bpmn", "diagram_level": "l1", "generated_code": "\ndef p131(n):\n    product = 1\n    has_odd_digits = False\n    \n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd_digits = True\n            \n    return product if has_odd_digits else 0\n"}
{"problem": "p131", "diagram_type": "bpmn", "diagram_level": "l2", "generated_code": "\ndef p131(n):\n    odd_product = 1\n    has_odd_digits = False\n    \n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            odd_product *= int(digit)\n            has_odd_digits = True\n            \n    return odd_product if has_odd_digits else 0\n"}
{"problem": "p131", "diagram_type": "bpmn", "diagram_level": "l3", "generated_code": "\ndef p131(n):\n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        d = n % 10\n        if d % 2 != 0:\n            has_odd = True\n        n //= 10\n    \n    if not has_odd:\n        return 0\n    \n    n = abs(n)\n    while n > 0:\n        d = n % 10\n        if d % 2 == 0:\n            product *= d\n        n //= 10\n    \n    return product\n"}
{"problem": "p131", "diagram_type": "block", "diagram_level": "l1", "generated_code": "\ndef p131(n):\n    product = 1\n    odd_found = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            odd_found = True\n    return product if odd_found else 0\n"}
{"problem": "p147", "diagram_type": "fc", "diagram_level": "l1", "generated_code": "\ndef p147(n: int) -> int:\n    a = [i * i + i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"problem": "p147", "diagram_type": "fc", "diagram_level": "l2", "generated_code": "\ndef p147(n: int) -> int:\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"problem": "p147", "diagram_type": "fc", "diagram_level": "l3", "generated_code": "\ndef p147(n):\n    a = [0] * n\n    count = 0\n    i = 1\n    while i <= n:\n        a[i - 1] = i * i + i + 1\n        i += 1\n    i = 1\n    while i < len(a):\n        j = i + 1\n        while j < len(a):\n            k = j + 1\n            while k < len(a):\n                if (a[i - 1] + a[j - 1] + a[k - 1]) % 3 == 0:\n                    count += 1\n                k += 1\n            j += 1\n        i += 1\n    return count\n"}
{"problem": "p147", "diagram_type": "bpmn", "diagram_level": "l1", "generated_code": "\ndef p147(n):\n    A = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            for k in range(j + 1, len(A)):\n                if (A[i] + A[j] + A[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"problem": "p147", "diagram_type": "bpmn", "diagram_level": "l2", "generated_code": "\ndef p147(n):\n    A = [(i * i - i + 1) for i in range(1, n + 1)]\n    counter = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            for k in range(j + 1, len(A)):\n                if (A[i] + A[j] + A[k]) % 3 == 0:\n                    counter += 1\n    return counter\n"}
{"problem": "p147", "diagram_type": "bpmn", "diagram_level": "l3", "generated_code": "\ndef p147(n):\n    A = [i * i + i + 1 for i in range(1, n + 1)]\n    counter = 0\n    i = 1\n    while i < len(A):\n        j = i + 1\n        while j < len(A):\n            k = j + 1\n            while k < len(A):\n                if (A[i] + A[j] + A[k]) % 3 == 0:\n                    counter += 1\n                k += 1\n            j += 1\n        i += 1\n    return counter\n"}
{"problem": "p147", "diagram_type": "block", "diagram_level": "l1", "generated_code": "\ndef p147(n):\n    A = [(i**2 - i + 1) for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            for k in range(j + 1, len(A)):\n                if (A[i] + A[j] + A[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"problem": "p150", "diagram_type": "fc", "diagram_level": "l1", "generated_code": "\ndef p150(n, x, y):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"problem": "p150", "diagram_type": "fc", "diagram_level": "l2", "generated_code": "\ndef p150(n: int, x: int, y: int) -> int:\n    if n == 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n"}
{"problem": "p150", "diagram_type": "fc", "diagram_level": "l3", "generated_code": "\ndef p150(n: int, x: int, y: int) -> int:\n    if n == 1:\n        return y\n    i = 2\n    while i * i < n:\n        if n % i == 0:\n            return y\n        i += 1\n    return x\n"}
{"problem": "p150", "diagram_type": "bpmn", "diagram_level": "l1", "generated_code": "\ndef p150(n, x, y):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"problem": "p150", "diagram_type": "bpmn", "diagram_level": "l2", "generated_code": "\ndef p150(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return x\n    return y\n"}
{"problem": "p150", "diagram_type": "bpmn", "diagram_level": "l3", "generated_code": "\ndef p150(n, x, y):\n    if n == 1:\n        return y\n    i = 2\n    while i < int(n**0.5) + 1:\n        if n % i == 0:\n            return y\n        i += 1\n    return x\n"}
{"problem": "p150", "diagram_type": "block", "diagram_level": "l1", "generated_code": "\ndef p150(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n"}
{"problem": "p155", "diagram_type": "fc", "diagram_level": "l1", "generated_code": "\ndef p155(n: int) -> tuple:\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count, odd_count)\n"}
{"problem": "p155", "diagram_type": "fc", "diagram_level": "l2", "generated_code": "\ndef p155(num: int) -> tuple:\n    even = 0\n    odd = 0\n    n = abs(num)\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        n //= 10\n    \n    return (even, odd)\n"}
{"problem": "p155", "diagram_type": "fc", "diagram_level": "l3", "generated_code": "\ndef p155(num):\n    even = 0\n    odd = 0\n    n = abs(num)\n    \n    while n > 0:\n        d = n % 10\n        if d % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        n //= 10\n    \n    return (even, odd)\n"}
{"problem": "p155", "diagram_type": "bpmn", "diagram_level": "l1", "generated_code": "\ndef p155(n):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(n)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"}
{"problem": "p155", "diagram_type": "bpmn", "diagram_level": "l2", "generated_code": "\ndef p155(n):\n    even_count = 0\n    odd_count = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"}
{"problem": "p155", "diagram_type": "bpmn", "diagram_level": "l3", "generated_code": "\ndef p155(n):\n    even = 0\n    odd = 0\n    n = abs(n)\n    \n    while n > 0:\n        d = n % 10\n        if d % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        n //= 10\n    \n    return (even, odd)\n"}
{"problem": "p155", "diagram_type": "block", "diagram_level": "l1", "generated_code": "\ndef p155(n):\n    even_count = 0\n    odd_count = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"}
